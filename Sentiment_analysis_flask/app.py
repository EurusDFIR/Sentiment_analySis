from flask import Flask, request, render_template, jsonify
import joblib
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
import numpy as np # C·∫ßn numpy

# --- Kh·ªüi t·∫°o ·ª©ng d·ª•ng Flask ---
app = Flask(__name__)

# --- T·∫£i m√¥ h√¨nh v√† vectorizer ƒë√£ l∆∞u ---
try:
    # ƒê·∫£m b·∫£o t√™n file kh·ªõp v·ªõi file b·∫°n ƒë√£ l∆∞u
    model = joblib.load('sentiment_logreg_model.joblib')
    vectorizer = joblib.load('tfidf_vectorizer.joblib')
    print("T·∫£i m√¥ h√¨nh v√† vectorizer th√†nh c√¥ng!")
except FileNotFoundError:
    print("L·ªói: Kh√¥ng t√¨m th·∫•y file model ho·∫∑c vectorizer. H√£y ƒë·∫£m b·∫£o ch√∫ng ·ªü c√πng th∆∞ m·ª•c v·ªõi app.py")
    model = None
    vectorizer = None
except Exception as e:
    print(f"L·ªói khi t·∫£i model/vectorizer: {e}")
    model = None
    vectorizer = None

# --- T·∫£i t√†i nguy√™n NLTK ---
try:
    stop_words = set(stopwords.words('english'))
    lemmatizer = WordNetLemmatizer()
except LookupError:
    print("L·ªói: Ch∆∞a t·∫£i d·ªØ li·ªáu NLTK (stopwords, wordnet).")
    stop_words = set()
    lemmatizer = None

# --- H√†m ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n (Ph·∫£i gi·ªëng h·ªát h√†m ƒë√£ d√πng khi hu·∫•n luy·ªán) ---
def preprocess_text(text):
    if lemmatizer is None:
        print("C·∫£nh b√°o: Lemmatizer ch∆∞a ƒë∆∞·ª£c t·∫£i.")
        # X·ª≠ l√Ω n·∫øu kh√¥ng c√≥ lemmatizer
        return text # Ho·∫∑c tr·∫£ v·ªÅ l·ªói

    text = text.lower()
    text = re.sub(r'<[^>]*>', '', text)
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    tokens = text.split()
    tokens = [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]
    return " ".join(tokens)

# --- Route cho trang ch·ªß ---
@app.route('/')
def home():
    return render_template('index.html')

# --- Route x·ª≠ l√Ω d·ª± ƒëo√°n ---
@app.route('/predict', methods=['POST'])
def predict():
    # Ki·ªÉm tra xem model v√† vectorizer ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng ch∆∞a
    if model is None or vectorizer is None or lemmatizer is None:
        return render_template('index.html', prediction_text='L·ªói: H·ªá th·ªëng ch∆∞a s·∫µn s√†ng ƒë·ªÉ d·ª± ƒëo√°n.', error=True)

    if request.method == 'POST':
        review_text = request.form['review']

        if not review_text.strip():
             return render_template('index.html', prediction_text='Vui l√≤ng nh·∫≠p ƒë√°nh gi√° phim.', error=True, original_review=review_text)

        # 1. Ti·ªÅn x·ª≠ l√Ω
        processed_text = preprocess_text(review_text)

        # 2. Vector h√≥a (D√πng transform, kh√¥ng fit_transform)
        try:
            # Quan tr·ªçng: Vectorizer mong ƒë·ª£i m·ªôt list/iterable ch·ª©a c√°c documents
            vectorized_text = vectorizer.transform([processed_text]) # Truy·ªÅn v√†o list ch·ª©a 1 document
        except Exception as e:
             print(f"L·ªói khi vector h√≥a: {e}")
             return render_template('index.html', prediction_text='L·ªói x·ª≠ l√Ω vƒÉn b·∫£n.', error=True, original_review=review_text)

        # 3. D·ª± ƒëo√°n
        try:
            prediction = model.predict(vectorized_text)
            # predict_proba ƒë·ªÉ l·∫•y x√°c su·∫•t (n·∫øu mu·ªën hi·ªÉn th·ªã ƒë·ªô tin c·∫≠y)
            # probability = model.predict_proba(vectorized_text)

            sentiment = "T√≠ch c·ª±c üòä" if prediction[0] == 1 else "Ti√™u c·ª±c üòû"

            # L·∫•y x√°c su·∫•t c·ªßa l·ªõp d·ª± ƒëo√°n (v√≠ d·ª•)
            # predicted_proba = probability[0][prediction[0]] * 100 # L·∫•y x√°c su·∫•t c·ªßa l·ªõp ƒë∆∞·ª£c d·ª± ƒëo√°n

            return render_template('index.html',
                                   prediction_text=f'D·ª± ƒëo√°n c·∫£m x√∫c: {sentiment}',
                                   # prediction_confidence=f'ƒê·ªô tin c·∫≠y: {predicted_proba:.2f}%', # (T√πy ch·ªçn)
                                   original_review=review_text)
        except Exception as e:
             print(f"L·ªói khi d·ª± ƒëo√°n: {e}")
             return render_template('index.html', prediction_text='L·ªói d·ª± ƒëo√°n.', error=True, original_review=review_text)

    return render_template('index.html')

# --- Ch·∫°y ·ª©ng d·ª•ng ---
if __name__ == "__main__":
    # T·∫Øt debug khi kh√¥ng c·∫ßn thi·∫øt n·ªØa
    app.run(debug=False, host='0.0.0.0') # host='0.0.0.0' ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ m√°y kh√°c trong c√πng m·∫°ng
    # Ho·∫∑c ch·ªâ c·∫ßn app.run() n·∫øu ch·∫°y tr√™n m√°y c·ª•c b·ªô